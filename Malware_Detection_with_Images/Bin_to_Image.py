import os
from PIL import Image

# 바이너리 파일을 받아와 바이너리 값으로
def getBinaryData(filename):
    binaryValues = []
    file = open(filename, "rb")
    data = file.read(1)
    while data !=b"":
        try:
            binaryValues.append(ord(data))
        except TypeError:
            pass
        data = file.read(1)

    return binaryValues

# 바이너리 값을 받아와 바이너리의 길이에 따라 가로/세로 비율을 지정하여 바이너리 이미지로 저장
def createGreyScaleImageSpecificWith(dataSet, outputfilename, width=0):
    if width == 0:
        size = len(dataSet)

        if size < 10240:
            width = 32
        elif 10240 <= size <= 10240 * 3:
            width = 64
        elif 10240 * 3 <= size <= 10240 * 6:
            width = 128
        elif 10240 * 6 <= size <= 10240 * 10:
            width = 256
        elif 10240 * 10 <= size <= 10240 * 20:
            width = 384
        elif 10240 * 20 <= size <= 10240 * 50:
            width = 512
        elif 10240 * 50 <= size <= 10240 * 100:
            width = 768
        else:
            width = 1024

    height = int(size / width) + 1

    image = Image.new('L', (width, height))
    image.putdata(dataSet)
    imagename = outputfilename + ".png"
    image.save(imagename)
    print(imagename + "GreyScale image created")

# 불러 올 바이너리 경로
original_dir = r"C:\Users\proqk\Documents\AI_based_malware_detection_and_classification\Binary"
# 이미지화 후 저장할 경로
save_dir = r"C:\Users\proqk\Documents\AI_based_malware_detection_and_classification\Image"
files = os.listdir(original_dir)

# 파일의 개수만큼 반복
for i in range (0, len(files)):
    files_path = original_dir + "/" + files[i]
    save_path = save_dir + "/" + files[i]

    # 해당 파일의 바이너리 값를 받아옴
    binaryData = getBinaryData(files_path)
    # 바이너리 값을 이미지로 변환하여 저장
    createGreyScaleImageSpecificWith(binaryData, save_path)
